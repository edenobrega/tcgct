@page "/mtgold/viewset/{set_id}"
@inject tcgct_mtg.Services.MTGService mtgservice
@inject AuthenticationStateProvider auth
@using tcgct_mtg.Models
@using tcgct.Data.MTG

<h3>@cards[0].Card.Set.Name</h3>
<style>
    img{
        max-height:250px;
    }
</style>
<input type="text" @onkeydown="KeyboardEventHandler" />
<table class="table">
    <thead>
        <tr>
            <th>Collector Number</th>
            <th>Name</th>
            <th>Type Line</th>
            <th>Text</th>
            <th>Image</th>
            <th>Collected</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var card in cards)
        {
            <tr style="display:@card.Display;visibility:@card.Visibility">
                <td>@card.Card.Collector_Number</td>
                <td>@card.Card.Name</td>
                <td>@card.Card.TypeLine.ToString()</td>
                <td>@card.Card.Text</td>
                <td><img src="@card.Card.Image" /></td>
                <td>@card.Collection.Count</td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="PreviousPage">Previous Page</button>
<button class="btn btn-primary" @onclick="NextPage">Next Page</button>
<h5>@(page)</h5>

@code {
    [Parameter]
    public string set_id { get; set; }

    public List<MTGViewCard>? cards;

    int page = 0;
    int perPage = 10;

    string filterValue;

    MTGViewCard? singleItem;

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Backspace")
        {
            if (filterValue.Length != 0)
            {
                Console.WriteLine("is not zero");
                filterValue = filterValue.Substring(0, filterValue.Length - 1);
            }
            return;
        }
        if(singleItem != null)
        {
            if (args.Key == "+")
            {
                return;
            }
            if (args.Key == "-")
            {
                return;
            }    
        }
        foreach (var card in cards)
        {
            if (card.Card.Collector_Number.ToLower() == filterValue.ToLower())
            {
                card.Filtered = true;
                card.Visible = true;
            }
            else
            {
                card.Filtered = false;
                card.Visible = false;
            }
        }


        filterValue += args.Key;
    }

    protected override async Task OnInitializedAsync()
    {
        
    }
    protected override void OnInitialized()
    {
        AuthenticationState authState = auth.GetAuthenticationStateAsync().Result;
        string cid = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
        string uid = authState.User.Claims.First(f => f.Type == cid).Value;
        List<Collection> collection = mtgservice.GetCollectedSet(uid, int.Parse(set_id)).ToList();
        List<Card> cards_raw = mtgservice.GetSetCards(int.Parse(set_id)).ToList();
        cards = new List<MTGViewCard>();
        foreach (var _c in cards_raw)
        {
            Collection col = collection.FirstOrDefault(f => f.CardID == _c.ID, new Collection{ CardID = _c.ID, UserID = uid, Count = 0  });
            MTGViewCard mvc = new MTGViewCard(_c, col);
            cards.Add(mvc);
        }

        cards = cards.OrderBy(o => o.Card.Collector_Number).ToList();
        LoadPage();
    }

    void LoadPage()
    {
        for (int i = page * perPage; i < (page * perPage) + perPage; i++)
        {
            cards[i].Visible = !cards[i].Visible;
        }
    }
    void NextPage()
    {
        if (page + 1 > (cards.Count + perPage - 1) / perPage)
        {
            return;
        }
        LoadPage();
        page++;
        LoadPage();
    }
    void PreviousPage()
    {
        if (page - 1 < 0)
        {
            return;
        }
        LoadPage();
        page--;
        LoadPage();
    }
}
