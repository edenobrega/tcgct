@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using tcgct_mtg.Models
@using tcgct.Data.MTG
@inject tcgct_mtg.Services.MTGSetService mtgset

<h1>Weather forecast</h1>

@if (sets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input @oninput="(ChangeEventArgs _e) => FilterValue = _e?.Value?.ToString()" />
    <table class="table">
        <thead>
            <tr>
                <th>ID  <select>
                    <option>Sort</option>
                    <option>Ascending</option>
                    <option>Descending</option>
                    </select>
                    </th>
                <th>Name  <select>
                    <option>Sort</option>
                    <option>Ascending</option>
                    <option>Descending</option>
                    </select></th>
                <th>Shorthand</th>
                <th>Icon</th>
                <th>Search URI</th>
                <th>
                    Set Type
                    <select @onchange=FilterSetType>
                        <option value=""></option>
                        @foreach (var set_type in sets.Select(x => x.Set.Set_Type_id.Name).Distinct())
                        {
                            <option value="@set_type">@set_type</option>
                        }
                    </select>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var set in sets)
            {
                <tr style="display:@set.Display;visibility:@set.Visibility">
                    <td>@set.Set.ID</td>
                    <td>@set.Set.Name</td>
                    <td>@set.Set.Shorthand</td>
                    <td>@set.Set.Icon</td>
                    <td>@set.Set.Search_Uri</td>
                    <td>@set.Set.Set_Type_id.Name</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="PreviousPage">Previous Page</button>
    <button class="btn btn-primary" @onclick="NextPage">Next Page</button>
    <h5>@(page)</h5>
}

@code {
    int page = 0;
    int perPage = 20;

    private string filterValue;
    public string FilterValue
    {
        get { return filterValue; }
        set 
        { 
            filterValue = value;
            foreach (var set in sets)
            {
                if (set.Set.Name.ToLower().Contains(filterValue.ToLower()))
                {
                    if (set.Visible)
                    {
                        continue;
                    }
                    set.Filtered = true;
                    set.FlipVisibility();
                }
                else
                {
                    if (!set.Visible)
                    {
                        continue;
                    }
                    set.Filtered = false;
                    set.FlipVisibility();
                }
            }
        }
    }

    private List<ViewSet>? sets;

    void LoadPage()
    {
        for (int i = page * perPage; i < (page * perPage) + perPage; i++)
        {
            sets[i].FlipVisibility();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<MTGSet> _sets = await mtgset.GetAll();
        sets = _sets.Select(x => new ViewSet(x)).ToList();

        LoadPage();
    }

    public void FilterSetType(ChangeEventArgs e)
    {
        if ((string)e.Value == "")
        {
            foreach (var set in sets)
            {
                set.Filtered = false;
                if (set.Visible)
                {
                    set.FlipVisibility();
                }
            }
            page = 0;
            LoadPage();
            return;
        }

        foreach (var set in sets)
        {
            if (set.Set.Set_Type_id.Name == (string)e.Value)
            {
                if (set.Visible)
                {
                    continue;
                }
                set.Filtered = true;
                set.FlipVisibility();
            }
            else
            {
                if (!set.Visible)
                {
                    continue;
                }
                set.Filtered = false;
                set.FlipVisibility();
            }
        }
    }

    //int pageCount = (records + recordsPerPage - 1) / recordsPerPage;
    void NextPage()
    {
        if (page + 1 > (sets.Count + perPage - 1) / perPage)
        {
            return;
        }
        LoadPage();
        page++;
        LoadPage();
    }

    void PreviousPage()
    {
        if(page - 1 < 0)
        {
            return;
        }
        LoadPage();
        page--;
        LoadPage();
    }
}
