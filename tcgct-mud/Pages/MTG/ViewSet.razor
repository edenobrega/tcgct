@page "/mtg/sets/{set_id}"
@using tcgct_mud.Data;
@using tcgct_service_interfaces.Generic;
@using tcgct_services_framework.MTG.Models;
@using tcgct_mud.Data.MTG;
@using tcgct_services_framework;
@using tcgct_services_interfaces.MTG;
@using Components
@inject IMTGService mtgs
@inject IDialogService DialogService

@if(data == null)
{
	<h1>Loading . . .</h1>
}
else
{
	<MudStack>
		<MudPaper>
			<MudToolBar Class="pa-3">
				<MudSwitch @bind-Checked="@quickEdit" Class="mr-5" Color="Color.Primary">Quick Edit</MudSwitch>
				<MudButton Variant="Variant.Outlined" Color="Color.Info" @onclick="OpenLog">Show Log</MudButton>

				<MudSpacer />
				<MudButton Variant="Variant.Outlined" Color="Color.Success"  OnClick="SaveChanges">Save</MudButton>
			</MudToolBar>
		</MudPaper>


		@if (messages.Count != 0)
		{
			<MudPaper Class="pa-3">
				@foreach (var message in messages)
				{
					<MudAlert Severity="message.Severity" ShowCloseIcon="true" CloseIconClicked="(() => messages.Remove(message))">@message.Text</MudAlert>
				}
			</MudPaper>
		}

		<MudPaper Class="pa-3">
			<MudTable Items="@data" Loading="loading" @ref="mudTable" Filter="new Func<CardHTML,bool>(FilterFuncBase)">
				<ToolBarContent>
					<MudText>Viewing set: @mtgs.GetSet(int.Parse(set_id)).Name</MudText>
					<MudSpacer />
					<MudTextField ReadOnly="true" Immediate="true" Placeholder="@filterValue" Adornment="Adornment.Start" Value="filterValue" OnKeyDown="DownHandler" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
				</ToolBarContent>
				<HeaderContent>
					<MudTh>Collector Number</MudTh>
					<MudTh>Name</MudTh>
					<MudTh>Mana Cost</MudTh>
					<MudTh>Text</MudTh>
					<MudTh>Flavor</MudTh>
					<MudTh>Image / Show Faces</MudTh>
					<MudTh>Collected</MudTh>
					@if (!quickEdit)
					{
						<MudTh>Add / Remove</MudTh>
					}
				</HeaderContent>
				<RowTemplate>
					@if (!loading)
					{
						<MudTd>@context.Card.Collector_Number</MudTd>
						<MudTd>@context.Card.Name</MudTd>
						<MudTd>@context.Card.ManaCost</MudTd>
						<MudTd>@context.Card.Text</MudTd>
						<MudTd><i>@context.Card.Flavor</i></MudTd>
						@if (context.Card.MultiFace)
						{
							<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowFaces(context.Card.Collector_Number))">@(context.HTMLValues.Show ? "Hide" : "Show")</MudButton></MudTd>
						}
						else
						{
							<MudTd><MudImage Src="@context.Card.Image" Height="200" /></MudTd>
						}
						<MudTd>@context.Card.Collected</MudTd>
						@if (!quickEdit)
						{

							<MudTd>
								<MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.ExposurePlus1" OnClick="@(() => AddCard(context.Card))"></MudIconButton>
								<MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.ExposureNeg1" OnClick="@(() => RemoveCard(context.Card))"></MudIconButton>
							</MudTd>
						}
					}
				</RowTemplate>
				<ChildRowContent>
					@if (context.HTMLValues.Show)
					{
						<MudTr>
							<td colspan="7">
								<MudCard Elevation="0">
									<MudCardHeader>
										<CardHeaderContent>
											<MudText Align="Align.Center" Typo="Typo.body1">Card Faces for <strong>@context.Card.Name</strong></MudText>
										</CardHeaderContent>
									</MudCardHeader>
									<MudCardContent Style="padding-left:400px;">
										<MudTable Items="@context.Card.Faces" Context="faceContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
											<HeaderContent>
												<MudTh>Name</MudTh>
												<MudTh>Mana Cost</MudTh>
												<MudTh>Text</MudTh>
												<MudTh>Image</MudTh>
											</HeaderContent>
											<RowTemplate>
												<MudTd>@faceContext.Name</MudTd>
												<MudTd>@faceContext.ManaCost</MudTd>
												<MudTd>@faceContext.OracleText</MudTd>
												<MudTd><MudImage Src="@faceContext.Image" Height="200" /></MudTd>
											</RowTemplate>
										</MudTable>
									</MudCardContent>
								</MudCard>
							</td>
						</MudTr>
					}
				</ChildRowContent>
				<PagerContent>
					<MudTablePager />
				</PagerContent>
			</MudTable>
		</MudPaper>
	</MudStack>
}

@code {
	[Parameter]
	public string set_id { get; set; }

	MudTable<CardHTML>? mudTable;
	bool quickEdit;
	public string _filterValue = "";
	public string filterValue 
	{
		get
		{
			return _filterValue;
		}
		set
		{
			_filterValue = value;
		}
	}

	bool loading = true;
	List<Message> messages;

	List<EditLog<Card>> log;

	List<CardHTML>? data;
	CardHTML loneCard = null;
	protected override async Task OnInitializedAsync()
	{
		var _data = await mtgs.GetSetCardsAsync(int.Parse(set_id), "1");

		// todo: change to dictionary
		data = new List<CardHTML>();

		_data.ToList().ForEach(fe =>
		{
			data.Add(new CardHTML(fe));
		});

		log = new List<EditLog<Card>>();
		messages = new List<Message>();
		loading = false;
	}

	public void AddCard(Card card)
	{
		card.Collected++;
		log.Add(new EditLog<Card> 
			{ 
				Card = card,
				QuickEdit = quickEdit,
				ChangeAmount = 1,
				Time = DateTime.Now
			});
	}
	public void RemoveCard(Card card)
	{
		if (card.Collected != 0)
		{
			card.Collected--; 			
			log.Add(new EditLog<Card> 
				{ 
					Card = card,
					QuickEdit = quickEdit,
					ChangeAmount = -1,
					Time = DateTime.Now
				});
		}
	}

	private bool FilterFuncBase(CardHTML card) => FilterFunc(card, filterValue);
	private bool FilterFunc(CardHTML card, string value)
	{
		if (string.IsNullOrWhiteSpace(value))
		{
			return true;			
		}
		if (quickEdit)
		{
			if (card.Card.Collector_Number == value)
			{
				return true;
			}
			return false;
		}
		if (card.Card.Collector_Number.Contains(value, StringComparison.OrdinalIgnoreCase))
		{
			return true;			
		}

		if (card.Card.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
		{
			return true;			
		}

		return false;
	}

	private void ShowFaces(string collectors_number)
	{
		CardHTML temp = data.Single(s => s.Card.Collector_Number ==  collectors_number);
		temp.HTMLValues.Show = !temp.HTMLValues.Show;
	}

	string[] invalidQuickEdit = new string[]
	{
		"+",
		"-",
		".",
		"backspace",
		"enter"
	};
	private void DownHandler(KeyboardEventArgs args)
	{
		if (args.Key == "Backspace")
		{
			if (filterValue.Length == 0)
			{
				return;
			}
			filterValue = filterValue.Substring(0, filterValue.Length - 1);
			return;
		}
		if (quickEdit)
		{
			if(mudTable.GetFilteredItemsCount() == 1)
			{
				if (args.Key == "+")
				{
					AddCard(mudTable.FilteredItems.First().Card);
					return;
				}
				if (args.Key == "-")
				{
					RemoveCard(mudTable.FilteredItems.First().Card);
					return;
				}
				if(args.Key == ".")
				{
					filterValue = "";
					return;
				}
			}			
		}
		if(args.Key.Length > 1 || invalidQuickEdit.Contains(args.Key))
		{
			return;
		}
		filterValue += args.Key;
	}

	private void SaveChanges()
	{
		loading = true;
		List<Collection> collection = data.Select(s => new Collection{ CardID = s.Card.ID, UserID = "1", Count = s.Card.Collected  }).ToList();
		mtgs.UpdateCollected(collection, "1", log);
		loading = false;
		messages.Add(new Message( Severity.Success, "Sucessfully updated collection!" ));
	}

	private void OpenLog()
	{
		var parameters = new DialogParameters { { "Log", log } };

		DialogService.Show<EditLogDialog<Card>>("Edit Log", parameters);
	}
}
