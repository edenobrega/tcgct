@page "/mtg/sets/missing/{set_id}"
@using tcgct_mud.Data;
@using tcgct_services_framework.MTG.Models;
@using tcgct_services_framework;
@using tcgct_services_framework.MTG;
@inject IMTGService mtgs

<MudTable Items="@data" Loading="loading" @ref="mudTable" Filter="new Func<DisplayHTML<Card>,bool>(FilterFuncBase)" LoadingProgressColor="Color.Info">
	<ToolBarContent>
		<MudText>Viewing set: @mtgs.GetSet(int.Parse(set_id)).Name</MudText>
		<MudSpacer />
		<MudSpacer />
		<MudTextField ReadOnly="true" Immediate="true" Placeholder="@filterValue" Adornment="Adornment.Start" Value="filterValue" OnKeyDown="DownHandler" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Collector Number</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Mana Cost</MudTh>
		<MudTh>Text</MudTh>
		<MudTh>Flavor</MudTh>
		<MudTh>Image / Show Faces</MudTh>
		<MudTh>Collected</MudTh>

	</HeaderContent>
	<RowTemplate>
		@if (!loading)
		{
			<MudTd>@context.Object.Collector_Number</MudTd>
			<MudTd>@context.Object.Name</MudTd>
			<MudTd>@context.Object.ManaCost</MudTd>
			<MudTd>@context.Object.Text</MudTd>
			<MudTd><i>@context.Object.Flavor</i></MudTd>
			@if (context.Object.MultiFace)
			{
				<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowFaces(context.Object.Collector_Number))">@(context.HTML.Show ? "Hide" : "Show")</MudButton></MudTd>
			}
			else
			{
				<MudTd><MudImage Src="@context.Object.Image" Height="200" /></MudTd>
			}
			<MudTd>@context.Object.Collected</MudTd>
		}
	</RowTemplate>
	<ChildRowContent>
		@if (context.HTML.Show)
		{
			<MudTr>
				<td colspan="7">
					<MudCard Elevation="0">
						<MudCardHeader>
							<CardHeaderContent>
								<MudText Align="Align.Center" Typo="Typo.body1">Card Faces for <strong>@context.Object.Name</strong></MudText>
							</CardHeaderContent>
						</MudCardHeader>
						<MudCardContent Style="padding-left:400px;">
							<MudTable Items="@context.Object.Faces" Context="faceContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
								<HeaderContent>
									<MudTh>Name</MudTh>
									<MudTh>Mana Cost</MudTh>
									<MudTh>Text</MudTh>
									<MudTh>Image</MudTh>
								</HeaderContent>
								<RowTemplate>
									<MudTd>@faceContext.Name</MudTd>
									<MudTd>@faceContext.ManaCost</MudTd>
									<MudTd>@faceContext.OracleText</MudTd>
									<MudTd><MudImage Src="@faceContext.Image" Height="200" /></MudTd>
								</RowTemplate>
							</MudTable>
						</MudCardContent>
					</MudCard>
				</td>
			</MudTr>
		}
	</ChildRowContent>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>


@code {
	[Parameter]
	public string set_id { get; set; }

	MudTable<DisplayHTML<Card>>? mudTable;

	public string _filterValue = "";
	public string filterValue
	{
		get
		{
			return _filterValue;
		}
		set
		{
			_filterValue = value;
		}
	}

	bool loading;


	List<DisplayHTML<Card>>? data;
	DisplayHTML<Card> loneCard = null;
	protected override async Task OnInitializedAsync()
	{
		loading = true;
		var _data = await mtgs.GetSetCardsAsync(int.Parse(set_id));
		data = new List<DisplayHTML<Card>>();
		_data.ToList().ForEach(fe =>
		{
			data.Add(new DisplayHTML<Card>(fe));
		});
		loading = false;
	}

	private bool FilterFuncBase(DisplayHTML<Card> card) => FilterFunc(card, filterValue);
	private bool FilterFunc(DisplayHTML<Card> card, string value)
	{
		if (string.IsNullOrWhiteSpace(value))
		{
			return true;
		}
		if (card.Object.Collector_Number.Contains(value, StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}

		if (card.Object.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}

		return false;
	}

	private void ShowFaces(string collectors_number)
	{
		DisplayHTML<Card> temp = data.Single(s => s.Object.Collector_Number == collectors_number);
		temp.HTML.Show = !temp.HTML.Show;
	}

	string[] invalidQuickEdit = new string[]
	{
		"+",
		"-",
		".",
		"backspace",
		"enter"
	};
	private void DownHandler(KeyboardEventArgs args)
	{
		if (args.Key == "Backspace")
		{
			if (filterValue.Length == 0)
			{
				return;
			}
			filterValue = filterValue.Substring(0, filterValue.Length - 1);
			return;
		}

		if (args.Key.Length > 1 || invalidQuickEdit.Contains(args.Key))
		{
			return;
		}
		filterValue += args.Key;
	}
}
