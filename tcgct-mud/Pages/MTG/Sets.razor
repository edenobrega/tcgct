@page "/mtg/sets/all"
@using tcgct_mud.Data;
@using tcgct_services_framework.Generic;
@using tcgct_services_framework.Generic.Interface;
@using tcgct_services_framework.Generic.Logging
@using tcgct_services_framework.MTG.Models;
@using tcgct_services_framework.MTG;
@using tcgct_services_framework.MTG.Services;
@using tcgct_mud.Helpers;
@inject AuthenticationStateProvider auth
@inject IMTGSetService setService
@inject ISettingsService settingsService
@inject SettingsHelper settingsHelp
@inject LoggerHelper logger 

<MudTable Items="@data" Loading="data == null" Filter="new Func<Set,bool>(FilterFunc1)">
	<ToolBarContent>
		<MudText>All MTG Sets</MudText>
		<MudSpacer />
		<MudTextField Placeholder="Search" Adornment="Adornment.Start" @bind-Value="filterValue" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>ID</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Shorthand</MudTh>
		<MudTh>Icon</MudTh>
		<MudTh>Set Type</MudTh>
		@if (authState.User.Identity.IsAuthenticated)
		{
			<MudTh>Pin</MudTh>			
		}
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudLink Href=@($"mtg/sets/{context.ID}")>@context.ID</MudLink></MudTd>
		<MudTd>@context.Name</MudTd>
		<MudTd>@context.Shorthand</MudTd>
		<MudTd><MudImage Src="@context.Icon" Height="30"/></MudTd>
		<MudTd>@context.Set_Type.Name</MudTd>
		@if (authState.User.Identity.IsAuthenticated)
		{
			<MudTd><MudIconButton Icon="@Icons.Material.Filled.PushPin" Color="context.Pinned ? Color.Error : Color.Success" OnClick="@(() => UpdatePinned(context))" aria-label="pin"></MudIconButton></MudTd>
		}
		</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>


@code {
	IEnumerable<Set>? data;
	string[] columns;
	string filterValue = "";
	AuthenticationState? authState;

	protected override async Task OnInitializedAsync()
	{
		logger.Log(LogLevel.Trace, "Entering Sets", null);

		authState = await auth.GetAuthenticationStateAsync();

		data = await setService.GetAllSetsAsync();

		if(authState.User.Identity is null)
		{
			return;
		}

		if (authState.User.Identity.IsAuthenticated)
		{
			// todo: gets too much data
			var GameIDs = settingsService.GetGameIDs();
			IEnumerable<int> filterBySetIds = settingsHelp.GetFilterBySetIDs(AuthHelper.GetUserID(authState), GameIDs["MTG"]);
			if (filterBySetIds.Count() != 0)
			{
				data = data.Where(w => filterBySetIds.Contains(w.ID));
			}

			IEnumerable<int> filterBySetTypes = settingsHelp.GetFilterBySetTypes(AuthHelper.GetUserID(authState), GameIDs["MTG"]);
			if (filterBySetTypes.Count() != 0)
			{
				data = data.Where(w => filterBySetTypes.Contains(w.Set_Type_id));
			}
			
			IEnumerable<PinnedSet> pins = await setService.GetPinnedSetsAsync(AuthHelper.GetUserID(authState));
			data.ToList().ForEach(fe =>
			{
				fe.Pinned = pins.Any(s => s.SetID == fe.ID);
			});
		}
	}

	private bool FilterFunc1(Set set) => FilterFunc(set, filterValue);
	private bool FilterFunc(Set set, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (set.Shorthand.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (set.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (set.Set_Type.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private async Task UpdatePinned(Set set)
	{
		if (authState is null || authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
		{
			return;
		}
		if (set.Pinned)
		{
			await setService.DeletePinnedSetAsync(AuthHelper.GetUserID(authState), set.ID);
			set.Pinned = false;
			return;
		}
		await setService.CreatePinnedSetAsync(AuthHelper.GetUserID(authState), set.ID);
		set.Pinned = true;
	}
}
