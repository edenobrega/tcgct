@page "/mtg/sets/all"
@using tcgct_mtg.Models;
@inject tcgct_mtg.Services.MTGService mtgs

<MudTable Items="@data" Loading="data == null" Filter="new Func<Set,bool>(FilterFunc1)">
	<ToolBarContent>
		<MudText>All MTG Sets</MudText>
		<MudSpacer />
		<MudTextField Placeholder="Search" Adornment="Adornment.Start" @bind-Value="filterValue" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>ID</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Shorthand</MudTh>
		<MudTh>Icon</MudTh>
		<MudTh>Set Type</MudTh>
		<MudTh>Pin</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudLink Href=@($"mtg/sets/{context.ID}")>@context.ID</MudLink></MudTd>
		<MudTd>@context.Name</MudTd>
		<MudTd>@context.Shorthand</MudTd>
		<MudTd><MudImage Src="@context.Icon" Height="30"/></MudTd>
		<MudTd>@context.Set_Type.Name</MudTd>
		<MudTd><MudIconButton Icon="@Icons.Material.Filled.PushPin" Color="context.Pinned ? Color.Error : Color.Success" OnClick="@(() => UpdatePinned(context))" aria-label="pin"></MudIconButton></MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>


@code {
	[Parameter]
	public string? user_id { get; set; }
	IEnumerable<Set>? data;
	string[] columns;
	string filterValue = "";

	protected override async Task OnInitializedAsync()
	{
		data = await mtgs.GetAllSetsAsync();
		IEnumerable<SetType> setTypes = await mtgs.GetAllSetTypesAsync();
		IEnumerable<PinnedSet> pins = await mtgs.GetPinnedSetsAsync("1"); 
		data.ToList().ForEach(fe =>
		{
			fe.Set_Type = setTypes.Single(s => s.ID == fe.Set_Type_id);
			fe.Pinned = pins.Any(s => s.SetID == fe.ID);
		});
	}

	private bool FilterFunc1(Set set) => FilterFunc(set, filterValue);
	private bool FilterFunc(Set set, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (set.Shorthand.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (set.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (set.Set_Type.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private async Task UpdatePinned(Set set)
	{
		if (set.Pinned)
		{
			await mtgs.DeletePinnedSetAsync("1", set.ID);
			set.Pinned = false;
			return;
		}
		await mtgs.CreatePinnedSetAsync("1", set.ID);
		set.Pinned = true;
	}
}
