@page "/mtg/sets/collecting"
@attribute [Authorize]
@using tcgct_services_framework;
@using tcgct_services_framework.MTG.Models;
@using tcgct_services_framework.MTG;
@using tcgct_services_framework.MTG.Services;
@inject IMTGSetService setService
@inject IMTGCollectionService collectionService

<MudTable Items="@data" Loading="data == null" Filter="new Func<Set,bool>(FilterFunc1)">
	<ToolBarContent>
		<MudText>All MTG Sets</MudText>
		<MudSpacer />
		<MudTextField Placeholder="Search" Adornment="Adornment.Start" @bind-Value="filterValue" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>ID</MudTh>
		<MudTh>View Missing</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Shorthand</MudTh>
		<MudTh>Icon</MudTh>
		<MudTh>Set Type</MudTh>
		<MudTh>Card Sets Collected</MudTh>
		<MudTh>Total Cards</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudLink Href=@($"mtg/sets/{context.ID}")>@context.ID</MudLink></MudTd>
		<MudTd><MudLink Href=@($"mtg/sets/missing/{context.ID}")>View</MudLink></MudTd>
		<MudTd>@context.Name</MudTd>
		<MudTd>@context.Shorthand</MudTd>
		<MudTd><MudImage Src="@context.Icon" Height="30"/></MudTd>
		<MudTd>@context.Set_Type.Name</MudTd>
		<MudTd>@context.CollectedData.CollectedCards</MudTd>
		<MudTd>@context.CollectedData.TotalCards</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>


@code {
	IEnumerable<Set>? data;
	string[] columns;
	string filterValue = "";

	protected override async Task OnInitializedAsync()
	{
		string userID = "1";
		data = await setService.GetCollectingSetsAsync(userID);
		if(userID != "")
		{
			data = await collectionService.PopulateSetCollectedAsync(data, userID);
		}
	}

	private bool FilterFunc1(Set set) => FilterFunc(set, filterValue);
	private bool FilterFunc(Set set, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (set.Shorthand.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (set.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (set.Set_Type.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}
